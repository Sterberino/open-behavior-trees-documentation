{
  "docs/ScriptReference/AlwaysFailNode.html": {
    "href": "docs/ScriptReference/AlwaysFailNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "AlwaysFailNode class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A decorator node whose Evaluate method always returns BehaviorTreeNodeResult.failure. Inherited Members Properties BehaviorTreeNode child The child node. See DecoratorNode. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/AlwaysSucceedNode.html": {
    "href": "docs/ScriptReference/AlwaysSucceedNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "AlwaysSucceedNode class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A decorator node whose Evaluate method always returns BehaviorTreeNodeResult.success. Inherited Members Properties BehaviorTreeNode child The child node. See DecoratorNode. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/BehaviorTree.html": {
    "href": "docs/ScriptReference/BehaviorTree.html",
    "title": "| openbehaviortrees.io",
    "keywords": "BehaviorTree class in OpenBehaviorTrees / inherits from: MonoBehavior Leave Feedback Description The behavior tree component. Should be added to any NPC or AI agent that you wish to make use of behavior trees. Properties BehaviorTreeNode rootNode The root of the behavior tree and the first node that is evaluated when the behavior tree ticks. BehaviorTreeNode activeSubTree If activeSubTree is not null, then when the behavior tree ticks, it will tick from activeSubTree instead of rootNode. Blackboard blackboard The global data store for the behavior tree. A Dictionary<string, object> used to access global data from BehaviorTreeNodes bool paused If set to true, the behavior tree will not tick. bool startOnEnable If set to true, the behavior tree will start running when OnEnable is called. Otherwise, you will need to call Setup() manually to start the Behavior Tree. You may wish to do this if AI agents are loaded asynchronously. Public Methods void Setup() Creates a new Blackboard if blackboard is null, and generates the runtime instances of the BehaviorTreeNodes in the tree. This is necessary for non-persistant runtime data, as BehaviorTreeNode inherits from ScriptableObject."
  },
  "docs/ScriptReference/BehaviorTreeNode-Clone.html": {
    "href": "docs/ScriptReference/BehaviorTreeNode-Clone.html",
    "title": "| openbehaviortrees.io",
    "keywords": "BehaviorTreeNode.Clone public BehaviorTreeNode Clone; Leave Feedback Description An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. Example using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEditor; using OpenBehaviorTrees; public class CloneExample : BehaviorTreeNode { //The following example will clone all of the fields of the original object (this) public override BehaviorTreeNode Clone() { CloneExample clonedNode = CreateInstance<CloneExample>(); // Use reflection to get all fields FieldInfo[] fields = typeof(CloneExample).GetFields( BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance ); foreach (FieldInfo field in fields) { // Copy the value of each field from the original to the cloned object field.SetValue(clonedNode, field.GetValue(this)); } return clonedNode; } }"
  },
  "docs/ScriptReference/BehaviorTreeNode-Evaluate.html": {
    "href": "docs/ScriptReference/BehaviorTreeNode-Evaluate.html",
    "title": "| openbehaviortrees.io",
    "keywords": "BehaviorTreeNode.Evaluate public BehaviorTreeNodeResult Evaluate(BehaviorTree behaviorTree); Leave Feedback Description Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Example using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEditor; using OpenBehaviorTrees; public class Example : BehaviorTreeNode { public Vector3 target; public float maxDistance; //Return failure if too far away from the target. Return true if within range. public override BehaviorTreeNodeResult Evaluate(BehaviorTree behaviorTree) { if (Vector3.Distance(behaviorTree.transform.position, target) < maxDistance) { return BehaviorTreeNodeResult.success; } return BehaviorTreeNodeResult.failure; } }"
  },
  "docs/ScriptReference/BehaviorTreeNode-GetAllChildren.html": {
    "href": "docs/ScriptReference/BehaviorTreeNode-GetAllChildren.html",
    "title": "| openbehaviortrees.io",
    "keywords": "BehaviorTreeNode.GetAllChildren public List<BehaviorTreeNode> GetAllChildren(); Leave Feedback Description Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty."
  },
  "docs/ScriptReference/BehaviorTreeNode.html": {
    "href": "docs/ScriptReference/BehaviorTreeNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "BehaviorTreeNode class in OpenBehaviorTrees / inherits from: ScriptableObject Leave Feedback Description Derive from this class to create a custom Behavior Tree Node. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/BehaviorTreeNodeResult.html": {
    "href": "docs/ScriptReference/BehaviorTreeNodeResult.html",
    "title": "| openbehaviortrees.io",
    "keywords": "BehaviorTreeNodeResult enumeration Leave Feedback Description Enum used to describe the result of BehaviorTreeNode evaluation. Allows for success, failure, or running (standard behavior tree implementation results). Properties success The BehaviorTreeNode succeeded upon evaluation. failure The BehaviorTreeNode failed upon evaluation. running The BehaviorTreeNode has not finished evaluation."
  },
  "docs/ScriptReference/BehaviorTreeRootNode.html": {
    "href": "docs/ScriptReference/BehaviorTreeRootNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "BehaviorTreeRootNode class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A special Decorator Node used as the root node of a Behavior Tree. It is used by the editor window to identify sub trees that can be placed in your behavior tree. The Evaluate method simply returns child.Evaluate(). Inherited Members Properties BehaviorTreeNode child The child node. See DecoratorNode. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/Blackboard.html": {
    "href": "docs/ScriptReference/Blackboard.html",
    "title": "| openbehaviortrees.io",
    "keywords": "Blackboard class in OpenBehaviorTrees / inherits from: Dictionary<string, object> Leave Feedback Description The Blackboard (sometimes called the data context) is a way for Behavior Trees to have some kind of data store that is global and accessible from all nodes. The Blackboard implementation in OpenBehaviorTrees uses a dictionary with strings as keys and object as values. Values will need to be cast to an appropriate data type before use when accessing them from nodes. The Blackboard implementation supports dictionary serialization and can be edited in the inspector. Supported data types are: UnityEngine.Object (asset references and in scene components/ GameObjects) int, double, float, long, string, and bool enums of any type All Vector types Bounds and BoundsInt Rect and RectInt Gradients, Animation Curves, and Color Any struct or class that is serializable using JsonUtility (Although there is no general drawer for it yet.) Example You can download the Blackboard from Here to use in your project if you want to use it without OpenBehaviorTrees."
  },
  "docs/ScriptReference/CompositeNode.html": {
    "href": "docs/ScriptReference/CompositeNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "CompositeNode class in OpenBehaviorTrees / inherits from: BehaviorTreeNode Leave Feedback Description Derive from this class to create a custom Composite Node. The purpose of a composite node is to execute multiple child nodes' Evaluate methods. Properties List<BehaviorTreeNode> children A list of children nodes. Inherited Members Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/ConditionNode.html": {
    "href": "docs/ScriptReference/ConditionNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "ConditionNode class in OpenBehaviorTrees / inherits from: BehaviorTreeNode Leave Feedback Description An abstract class representing a node that evaluates some condition. The purpose of this node is to organize nodes as either a condition or task node in the Nodes List sidebar in the Behavior Tree Editor Window. Your node should inherit from ConditionNode if it's purpose is evaluating some condition, but it is otherwise an empty class that is the same as BehaviorTreeNode. Inherited Members Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/DecoratorNode.html": {
    "href": "docs/ScriptReference/DecoratorNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "DecoratorNode class in OpenBehaviorTrees / inherits from: BehaviorTreeNode Leave Feedback Description Derive from this class to create a custom Decorator Node. The purpose of a decorator node is to manipulate the result of a node's Evaluate method. A decorator node has one child node, which should be run in it's Evaluate method. Properties BehaviorTreeNode child The child node of the decorator. Call child.Evaluate(BehaviorTree behaviorTree) in your override of Evaluate(). Inherited Members Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/InverterNode.html": {
    "href": "docs/ScriptReference/InverterNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "InverterNode class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A decorator node whose Evaluate method inverts the BehaviorTreeNodeResult of its child. Returns BehaviorTreeNodeResult.failure when the child returns BehaviorTreeNodeResult.success. Returns BehaviorTreeNodeResult.success when the child returns BehaviorTreeNodeResult.failure. Returns BehaviorTreeNodeResult.running when the child returns BehaviorTreeNodeResult.running. Inherited Members Properties BehaviorTreeNode child The child node. See DecoratorNode. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/ParallelNode.html": {
    "href": "docs/ScriptReference/ParallelNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "ParallelNode class in OpenBehaviorTrees / inherits from: CompositeNode Leave Feedback Description A composite node that runs all of its children in parallel. If all results of the children's Evaluate methods are the same, it returns that result. Otherwise, it defaults to defaultToResult Properties BehaviorTreeNodeResult defaultToResult The default value returned by Evaluate if the children nodes do not return the same result. Inherited Members Properties List<BehaviorTreeNode> children A list of children nodes. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/RepeaterNode.html": {
    "href": "docs/ScriptReference/RepeaterNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "RepeaterNode class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A decorator node that repeats its behavior either a set number of times, or indefinitely. Properties bool repeatForever If set to true, the repeater will repeat indefinitely. int repeatCount The number of times the node should repeat if not set to repeat forever. BehaviorTreeNodeResult resultOnComplete The result that is returned when the the repeater finishes repeating. Set to success by default. Inherited Members Properties BehaviorTreeNode child The child node that is repeated. See DecoratorNode. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/SelectorNode.html": {
    "href": "docs/ScriptReference/SelectorNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "SelectorNode class in OpenBehaviorTrees / inherits from: CompositeNode Leave Feedback Description A composite node that runs all of its children in order. Sometimes referred to as a Fallback Node in other implementations. For each child, if the child returns success, the Selector returns success. If the child returns running, the selector returns running and will start from that child next time it is ticked. If no child returns success or running, the Selector returns failure. Inherited Members Properties List<BehaviorTreeNode> children A list of children nodes. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/SequenceNode.html": {
    "href": "docs/ScriptReference/SequenceNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "SequenceNode class in OpenBehaviorTrees / inherits from: CompositeNode Leave Feedback Description A composite node that runs all of its children in order. For each child, if the child returns success, the Sequence Node continues and evaluates the next child. If the child returns running, the Sequence Node returns running and will start evaulation from that child next time it is ticked. If no child returns success or running, the Sequence Node returns failure. Inherited Members Properties List<BehaviorTreeNode> children A list of children nodes. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/SubTreeNode.html": {
    "href": "docs/ScriptReference/SubTreeNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "SubTreeNode class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A special decorator node used by the Behavior Tree Editor Window to separate parts of a behavior tree into separate smaller trees. The Evaluate method simply calls the Evaluate method of its child node. Inherited Members Properties BehaviorTreeNode child The child node. See DecoratorNode. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/TaskNode.html": {
    "href": "docs/ScriptReference/TaskNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "TaskNode class in OpenBehaviorTrees / inherits from: BehaviorTreeNode Leave Feedback Description An abstract class representing a node that executes some behavior. The purpose of this node is to organize nodes as either a condition node or task node in the Nodes List sidebar in the Behavior Tree Editor Window. Your node should inherit from ConditionNode if it's purpose is to execute some behavior (such as moving the agent), but it is otherwise an empty class that is the same as BehaviorTreeNode. Inherited Members Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/UtilityComposite.html": {
    "href": "docs/ScriptReference/UtilityComposite.html",
    "title": "| openbehaviortrees.io",
    "keywords": "UtilityComposite class in OpenBehaviorTrees / inherits from: CompositeNode Leave Feedback Description The UtilityComposite node is a special CompositeNode that only accepts nodes of type UtilityEvaluator in its children list. Derive from this class to create a custom Utility Composite Node, for extending Utility AI functionality. Properties List<BehaviorTreeNode> children A list of children nodes. The UtilityComposite node prevents adding non-UtilityEvaluator nodes to this list. Inherited Members Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/UtilityDecorator.html": {
    "href": "docs/ScriptReference/UtilityDecorator.html",
    "title": "| openbehaviortrees.io",
    "keywords": "UtilityDecorator class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A special decorator node that only accepts a child of type UtilityEvaluator. Derive from this class if you want to manipulate the output of a UtilityEvaluator's GetScore method. Inherited Members Properties BehaviorTreeNode child The child node that will have its score altered. UtilityDecorator will not allow for nodes that are not derived from UtilityEvaluator. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/UtilityEvaluator.html": {
    "href": "docs/ScriptReference/UtilityEvaluator.html",
    "title": "| openbehaviortrees.io",
    "keywords": "UtilityEvaluator class in OpenBehaviorTrees / inherits from: DecoratorNode Leave Feedback Description A special decorator node used by UtilitySelector nodes for implementing Utility AI behavior. The UtilityEvaluator node produces a score, which allows the UtilitySelector to rank different nodes. The Evaluate method of the selected UtilityEvaluator node is then run. Public Methods float GetScore(BehaviorTree behaviorTree) An abstract method that returns a float. Override this method to produce a score to evaluate utility behaviors. Inherited Members Properties BehaviorTreeNode child The child node that is repeated. See DecoratorNode. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/UtilitySelector.html": {
    "href": "docs/ScriptReference/UtilitySelector.html",
    "title": "| openbehaviortrees.io",
    "keywords": "UtilitySelector class in OpenBehaviorTrees / inherits from: UtilityComposite Leave Feedback Description The UtilitySelector node selects from a list of UtilityEvaluator child nodes to return the UtilityEvaluator's child node's Evaluate method. Each UtilityEvaluator node has a GetScore method, which returns a float. The UtilitySelector gets the scores of all of its children, and selects the child to evaluate based on its score. chooseFromTopResults determines which node is selected for evaluation. If chooseFromTopResults is 0, the UtilityEvaluator with the highest score is selected for evaluation, otherwise, it is randomly selected from the top chooseFromTopResults scoring nodes. Properties int chooseFromTopResults The UtilitySelector chooses randomly from the top x nodes, where x=chooseFromTopResults. If chooseFromTopResults is 0, the UtilitySelector chooses the top scoring node. Inherited Members Properties List<BehaviorTreeNode> children A list of children nodes. The UtilitySelector node prevents adding non-UtilityEvaluator nodes to this list. Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/ScriptReference/WaitNode-TimeType.html": {
    "href": "docs/ScriptReference/WaitNode-TimeType.html",
    "title": "| openbehaviortrees.io",
    "keywords": "WaitNode.TimeType enumeration Leave Feedback Description Enum used to describe how the counter that tracks elapsed time is incremented in WaitNode. Properties deltaTime The counter in the WaitNode is incremented using Time.deltaTime. fixedDeltaTime The counter in the WaitNode is incremented using Time.fixedDeltaTime. unscaledDeltaTime The counter in the WaitNode is incremented using Time.unscaledDeltaTime. fixedUnscaledDeltaTime The counter in the WaitNode is incremented using Time.fixedUnscaledDeltaTime. smoothDeltaTime The counter in the WaitNode is incremented using Time.smoothDeltaTime."
  },
  "docs/ScriptReference/WaitNode.html": {
    "href": "docs/ScriptReference/WaitNode.html",
    "title": "| openbehaviortrees.io",
    "keywords": "WaitNode class in OpenBehaviorTrees / inherits from: ConditionNode Leave Feedback Description When this node is evaluated, it increments a counter by the time passed since the last frame. If the time is less than waitTime it returns BehaviorTreeNodeResult.failure. Otherwise, it returns BehaviorTreeNodeResult.success and the counter is reset. Properties float waitTime A float that represents how long the node must wait before returning BehaviorTreeNodeResult.success. WaitNode.TimeType timeType An enum that determines how the counter is incremented. Inherited Members Public Methods Evaluate Ran when the behavior tree ticks. Returns BehaviorTreeNodeResult.success, BehaviorTreeNodeResult.failure, or BehaviorTreeNodeResult.running. Clone An abstract method returning a BehaviorTreeNode. Required to create a runtime instance. GetAllChildren Returns a list of all children nodes. For non-decorator, non-composite nodes, the list will be empty. OnValidate An empty virtual method exists in the BehaviorTreeNode class. The method is called after changing values in the BehaviorTreeEditorWindow. Override it if you need custom behavior in OnValidate."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "| openbehaviortrees.io",
    "keywords": "Getting Started In order to use this package, you must install it from GitHub. The package can be found here. A guide on how to install a Unity Package from GitHub can be found here. The next thing to do is add the behavior tree component to a GameObject You will be presented with a button that allows you to create a new tree from a Behavior Tree Root node Once you have created your new tree, you will be presented with the option to open it. The Node Editor Window You will be presented with a node editor window for managing and editing Behavior Trees. In the node editor, you can zoom using the scroll wheel, move around using the mouse, and select nodes for inspection. You can also select multiple nodes simultaneously by holding shift. You can also copy and paste nodes by right-clicking to open a context menu: Nodes List You can view all placeable nodes by opening the Nodes List sidebar. All non-abstract node types will be visible in this window, including any nodes that you create that inherit from the BehaviorTreeNode class. Also in the window will be any existing behavior trees you have created, which can be placed as a sub-tree. This helps with modularity and readibility of trees. You may search for nodes using the searchbar at the top of the nodes list view. Inspector The Inspector window works exactly like Unity's built-in inspector window. You may also set an icon for a Node type, which will be visible in the project window and on the nodes in the Node Editor Window. Final Notes Any changes made to the tree will only be applied by using the save button. Standard behavior tree node types are available, such as Selector, Sequencer, Inverter, Always Fail, and more. Also available is a UtilitySelector node, for implementing Utility AI/ GOAP behaviors. Children of UtilitySelector must inherit from UtilityEvaluator. Scripts are contained in the OpenBehaviorTree namespace. More Information about the blackboard can be found Here"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | openbehaviortrees.io",
    "keywords": "Introduction Open Behavior Trees is an open-source, flexible Behavior Tree implementation for Unity. It is inspired by BehaviorDesigner and other Behavior Tree implementations. Behavior Trees are an industry-standard method of creating complex, modular, and flexible AI for video games, and without a built-in solution, the Unity engine lags behind other engines such as Unreal Engine. Popular implementations available on the Unity Asset Store can be as expensive as $80, which is an expense that hobbyists and independant developers may not be able to afford. This was my primary reason for creating this package. If you enjoy this package, and the following documentation, I only ask that you let me know by starring the GitHub repo here. Enjoy!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Open Behavior Trees | openbehaviortrees.io",
    "keywords": "Open Behavior Trees Open Behavior Trees is an open-source, flexible Behavior Tree implementation for Unity. It is inspired by BehaviorDesigner and other Behavior Tree implementations. Behavior Trees are an industry-standard method of creating complex, modular, and flexible AI for video games, and without a built-in solution, the Unity engine lags behind other engines such as Unreal Engine. Popular implementations available on the Unity Asset Store can be as expensive as $80, which is an expense that hobbyists and independant developers may not be able to afford. This was my primary reason for creating this package. If you enjoy this package, and the following documentation, I only ask that you let me know by starring the GitHub repo here. Enjoy! Documentation"
  }
}